generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  userId     String     @id @default(uuid())
  username   String
  age        Int
  email      String
  password   String
  profileUrl String?
  createdAt  DateTime   @default(now())
  blogs      Blog[]
  comments   Comment[]
  following  Follow[]   @relation("Following")
  followers  Follow[]   @relation("Followers")
  likedBlogs BlogLike[]
}

model Blog {
  blogId     String     @id @default(uuid())
  text       String
  tags       String[]
  user       User       @relation(fields: [userUserId], references: [userId])
  createdAt  DateTime   @default(now())
  userUserId String
  comments   Comment[]
  likedBy    BlogLike[]
  Images     Images[]
}

model Comment {
  commentId  String   @id @default(uuid()) // Added commentId as the primary key instead of using blogId
  text       String
  blog       Blog     @relation(fields: [blogBlogId], references: [blogId])
  user       User     @relation(fields: [userUserId], references: [userId])
  createdAt  DateTime @default(now())
  blogBlogId String
  userUserId String
}

model Follow {
  followId   String @id @default(uuid())
  follower   User   @relation("Following", fields: [followerId], references: [userId])
  followed   User   @relation("Followers", fields: [followedId], references: [userId])
  followerId String
  followedId String

  @@unique([followerId, followedId]) // Ensure a user cannot follow the same user twice
}

model BlogLike {
  likeId    String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [userId])
  blog      Blog     @relation(fields: [blogId], references: [blogId])
  createdAt DateTime @default(now())
  userId    String
  blogId    String

  @@unique([userId, blogId]) // Ensure a user can like a blog only once
}

model Images {
  imageId    String   @id @default(uuid())
  url        String
  blog       Blog     @relation(fields: [blogBlogId], references: [blogId])
  createdAt  DateTime @default(now())
  blogBlogId String
}
